# import urllib.request
# from bs4 import BeautifulSoup

# datos = urllib.request.urlopen("https://agriculture.newholland.com/nar/es-mx/equipos-maquinas/productos/tractores/genesis-t8").read().decode()

# print(datos)
# soup = BeautifulSoup(datos, 'html.parser')
# tags = soup.find_all("figcaption")
# print(tags)
# lista_val = []

# for val in tags:
#     lista_val.append(val.getText())

# print(lista_val)


# , {"class": "Box-Summary__Name"}

# import random


# poligono = [[32.590371430865,-115.353230967552] , [32.1687552225146,-115.130849517825] , [31.2504059514186,-113.023707252242] , [28.2864362723137,-110.987817321236] , [27.9774834479049,-110.665480712793],
# [27.2041059542213,-110.331452118913] , [27.1055766021287,-109.961168677345] , [27.0523006935245,-109.898849485091] , [26.7970761363627,-109.842759907393] , [26.7189496140147,-109.74158342766],
# [26.7715488198678,-109.49835174255] , [26.5204326281206,-109.230053862614] , [26.2936428372166,-109.071235906813] , [26.1240509440741,-109.146969758509] , [26.0621889353586,-109.379663530705],
# [25.8414115297344,-109.40665592121] , [25.6609943793566,-109.066718922228] , [25.6918251788766,-108.91251969624] , [25.3103626721964,-108.453596949896] , [25.356552698236,-108.331521242865],
# [24.8965914652215,-107.849816054414] , [24.7020010623742,-107.952938001995] , [24.5464166693237,-107.547776715395] , [24.1649853137244,-107.160715240295] , [22.3992947120164,-105.59362394487],
# [22.0901929055445,-105.320724424331] , [21.5245405307161,-105.017905005444] , [20.0515855401093,-105.37939442891] , [18.4404254295469,-103.213617189345] , [16.4177163270322,-98.1103445798246],
# [15.906024618437,-96.4802266683131] , [16.4798350111372,-94.9213773075974] , [15.4134766974572,-92.3186111338674] , [18.0134957367909,-91.0022123115147] , [18.2090975693009,-88.8831723201567],
# [18.536108737744,-88.3859216971196] , [21.395305974255,-87.1687010217969] , [20.9437805204484,-90.2503353637974] , [18.9412193843968,-90.6075994323124] , [17.9510758687793,-94.6508034880085],
# [20.1191001618559,-97.3205086711438] , [22.1369994715173,-97.9139853617719] , [25.7883360369662,-97.5946679929352] , [25.9080747138249,-98.4593719612581] , [27.7187120282154,-100.225234466866],
# [29.5782631009026,-101.454897432954] , [29.595864342362,-102.547477909065] , [28.7997244956289,-103.164931233286] , [29.0446303707273,-103.690295585339] , [29.5230276254138,-104.638137361869],
# [30.324422415936,-104.861944060879] , [31.6320139573958,-106.541857701487] , [31.6435738384791,-108.073042844429] , [31.2254308838856,-108.006927351132] , [31.2289831530016,-111.101959040849],
# [32.590371430865,-115.353230967552]
# ]


# def genera_punto():
#     x_punto = random.uniform(15.4134766974572, 32.590371430865)
#     y_punto = random.uniform(-115.353230967552, -87.1687010217969)
#     punto = [x_punto, y_punto]
    
#     dentro = False
#     totl = 0

#     for i in range(len(poligono) - 1):
#         x1 = poligono[i][0]
#         x2 = poligono[i+1][0]
#         y1 = poligono[i][1]
#         y2 = poligono[i+1][1]


#         if ((y_punto < y1) != (y_punto < y2)) and (x_punto < (x2-x1) * (y_punto-y1) / (y2-y1) + x1):
#             totl += 1
#             dentro = not dentro
    
#     return [dentro, punto]
    
# gp = genera_punto()
# while not gp[0]:
#     gp = genera_punto()








